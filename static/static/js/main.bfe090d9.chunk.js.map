{"version":3,"sources":["AddTodos.js","TodoList.js","App.js","serviceWorker.js","index.js"],"names":["AddTodos","Fragment","onSubmit","event","props","handleSubmit","type","value","this","placeholder","onChange","handleChange","Component","TodoList","val","deleteTodo","complete","console","log","className","completed","onClick","title","App","state","todos","method","url","body","fetch","headers","JSON","stringify","result","fetchRequest","_id","then","data","json","setState","map","filter","valu","preventDefault","target","list","ind","key","e","React","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.bfe090d9.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport './App.css';\n\nclass AddTodos extends Component {\n  render() {\n    return (\n      <React.Fragment>\n        <form onSubmit={event => this.props.handleSubmit(event)}>\n          <label>\n            Add TODO:\n            <input\n              type=\"text\"\n              value={this.props.value}\n              placeholder=\"Enter the Todo\"\n              onChange={event => this.props.handleChange(event)}\n            />\n          </label>\n          <input type=\"submit\" value=\"Submit\" />\n        </form>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default AddTodos;\n","import React from \"react\";\nimport './App.css';\n\nconst TodoList = ({ val, deleteTodo, complete }) => {\n  console.log(val);\n  return <div className=\"todo-wrap\">\n            <li className={val.completed ? 'todo-done' : 'todo'}>\n            <h4 onClick={() => complete(val)}>{val.title}</h4>\n            <h4 className=\"delete-todo\" onClick={() => deleteTodo(val)}><b>X</b></h4>\n            </li> \n        </div>;\n};\n\nexport default TodoList;\n","import React from \"react\";\nimport AddTodos from \"./AddTodos\";\nimport TodoList from \"./TodoList\";\nimport \"./App.css\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: \"\",\n      todos: []\n    };\n  }\n   async fetchRequest(method,url,body) {\n    const result = await fetch(url,{\n      method: method,\n      headers:{\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(body)\n    })\n    return result;\n  }\n  complete(val) {\n    const result = this.fetchRequest( 'PUT', `/api/todos/${val._id}`, {...val, completed: !val.completed} )\n      result.then(data => data.json())\n            .then(data => {\n              this.setState({todos: this.state.todos.map((value => {\n                if(value.title === val.title) {\n                  return {...val, completed: !value.completed}\n                } else return value;\n              }))})\n              return data;\n            })\n            .then(data => console.log(data))\n  }\n  deleteTodo(val) {\n    const result = this.fetchRequest('DELETE', `/api/todos/${val._id}`)\n        result.then(data => data.json())\n              .then(data => {\n                this.setState({todos: this.state.todos.filter(valu => {\n                  return valu._id !== val._id;\n                })})\n                return data;\n              })\n              .then(data => console.log(data));\n  }\n  handleSubmit(event) {\n    event.preventDefault();\n    const result = this.fetchRequest( 'POST', \"/api/todos\", {title: this.state.value} );\n    result.then(data => data.json())\n          .then(data => this.setState({todos: [...this.state.todos, data], value: \"\"}))\n          .then(data => console.log(data));\n  }\n  handleChange(event) {\n    this.setState({ value: event.target.value });\n    console.log(this.state.value);\n  }\n  componentDidMount() {\n    const response = this.fetchRequest( 'GET', \"/api/todos\" )\n      response.then(data => data.json())\n      .then(data => {\n        console.log(data);\n        return data;\n      })\n      .then(todos => this.setState({ todos }));\n  }\n  render() {\n    const list = this.state.todos.map((val, ind) => {\n      return <TodoList \n                key={ind} \n                val={val} \n                deleteTodo={(val) => this.deleteTodo(val)}\n                complete={(val) => this.complete(val)} \n            />;\n    });\n    return (\n      <div className=\"todo-list\">\n        <AddTodos\n          handleSubmit={(e) => this.handleSubmit(e)}\n          handleChange={(e) => this.handleChange(e)}\n          value={this.state.value}\n        />\n        <br />\n        {list}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}